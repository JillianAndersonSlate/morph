// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`react-dom parses react-dom Action 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

const Action = props => {
  return props.check
    ? <button onClick={props.clickMe} className={styles.h1lmw638}>
        <div>click me</div>{props.children}
      </button>
    : null;
};

export default Action;
// fonts {}
"
`;

exports[`react-dom parses react-dom AnimatedButton 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import Animated from 'react-dom-animated';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

const AnimatedButton = props => {
  return (
    <Animated.button
      onClick={props.onClick}
      className={styles.h1lmw638}
      style={{ opacity: props.opacity }}
    >
      <div>hey</div>{props.children}
    </Animated.button>
  );
};

export default AnimatedButton;
// fonts {}
"
`;

exports[`react-dom parses react-dom BackgroundImage 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import Animated from 'react-dom-animated';
import css from 'glam';
const styles = {
  h1bfz4lt: css('css-1lgf2gr', [], () => [
    \`.css-1lgf2gr { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column;
background-image: url(\\"https://viewsdx.com/image.jpg\\"); }\`,
  ]),
  h1dhb6n: css('css-ii8p9n', [], () => [
    \`.css-ii8p9n { flex-direction: row; -webkit-box-direction: normal; -webkit-box-orient: horizontal; -ms-flex-direction: row; -webkit-flex-direction: row;
background-size: contain; }\`,
  ]),
};

const BackgroundImage = props => {
  return (
    <div className={styles.h1bfz4lt}>
      <Animated.div
        className={styles.h1dhb6n}
        style={{ backgroundImage: \`url(\${props.backgroundImage})\` }}
      />
      {props.children}
    </div>
  );
};

export default BackgroundImage;
// fonts {}
"
`;

exports[`react-dom parses react-dom BoxShadow 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import Animated from 'react-dom-animated';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

const BoxShadow = props => {
  return (
    <Animated.div
      className={styles.h1lmw638}
      style={{ boxShadow: \`10px 5px 2px \${props.color}\` }}
    >
      {props.children}
    </Animated.div>
  );
};

export default BoxShadow;
// fonts {}
"
`;

exports[`react-dom parses react-dom GoTo 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

const GoTo = props => {
  return (
    <a
      href=\\"https://viewsdx.com\\"
      rel=\\"noopener noreferrer\\"
      target=\\"_blank\\"
      className={styles.h1lmw638}
    >
      <div>Go to ViewsDX website!</div>{props.children}
    </a>
  );
};

export default GoTo;
// fonts {}
"
`;

exports[`react-dom parses react-dom Hover 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  hpg1h4y: css('css-i58qmr', [], () => [
    \`.css-i58qmr { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column;
background-color: black; }\`,
    \`.css-i58qmr:hover { background-color: white; }\`,
  ]),
  h1669j73: css('css-9glvsj', [], () => [
    \`.css-9glvsj { color: white; }\`,
    \`.css-9glvsj:hover { color: black; }\`,
  ]),
};

const Hover = props => {
  return (
    <button
      data-test-id=\\"Button\\"
      onClick={props.onClick}
      className={styles.hpg1h4y}
    >
      <div className={styles.h1669j73}>Hey!</div>{props.children}
    </button>
  );
};

export default Hover;
// fonts {}
"
`;

exports[`react-dom parses react-dom HoverProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  hpg1h4y: css('css-i58qmr', [], () => [
    \`.css-i58qmr { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column;
background-color: black; }\`,
    \`.css-i58qmr:hover { background-color: white; }\`,
  ]),
  h1669j73: css('css-9glvsj', [], () => [
    \`.css-9glvsj { color: white; }\`,
    \`.css-9glvsj:hover { color: black; }\`,
  ]),
};

const HoverProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <button
      data-test-id=\\"Button\\"
      onClick={props.onClick}
      className={styles.hpg1h4y}
    >
      {childrenArray[props.chidrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.chidrenProxyMap['props.icon']],
            { fill: 'white', fillHover: 'black' }
          )
        : null}
      {' '}data-test-id=\\"HoverProxy.Icon\\"<div className={styles.h1669j73}>
        Hey!
      </div>
    </button>
  );
};

export default HoverProxy;
// fonts {}
"
`;

exports[`react-dom parses react-dom JustText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';

const JustText = props => {
  return <div>hey!</div>;
};

export default JustText;
// fonts {}
"
`;

exports[`react-dom parses react-dom ListOfSomething 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

const ListOfSomething = props => {
  return (
    <div className={styles.h1lmw638}>
      {Array.isArray(props.list) &&
        props.list.map((item, index) =>
          <div dataIndex={index} style={{ color: item.color }} key={index}>
            {index}
          </div>
        )}
      {props.children}
    </div>
  );
};

export default ListOfSomething;
// fonts {}
"
`;

exports[`react-dom parses react-dom ListWithData 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
import usersData from './users.data.js';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

const ListWithData = props => {
  return (
    <div className={styles.h1lmw638}>
      {Array.isArray(usersData) &&
        usersData.map((item, index) => <div key={index}>{item.name}</div>)}
      {props.children}
    </div>
  );
};

export default ListWithData;
// fonts {}
"
`;

exports[`react-dom parses react-dom NameIsType 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';

const NameIsType = props => {
  return <div data-test-id=\\"Texto\\">iam</div>;
};

export default NameIsType;
// fonts {}
"
`;

exports[`react-dom parses react-dom NestedRoutes 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-dom';
import { Route } from 'react-router-dom';
import Topic from './Topic.view.js';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

const NestedRoutes = props => {
  return (
    <div data-test-id=\\"Topics\\" className={styles.h1lmw638}>
      <div>topics</div>
      <Link
        to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
        data-test-id=\\"NestedRoutes.Link\\"
        className={styles.h1lmw638}
      >
        <div>Rendering with React</div>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps =>
          <Topic data-test-id=\\"NestedRoutes.Topic\\" {...routeProps} />}
      />
      {props.children}
    </div>
  );
};

export default withRouter(NestedRoutes);
// fonts {}
"
`;

exports[`react-dom parses react-dom Print 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
  hrak8un: css('css-kbgujp', [], () => [
    \`@media print {
    .css-kbgujp {
        display: none
    }
}\`,
  ]),
};

const Print = props => {
  return (
    <div className={styles.h1lmw638}>
      <div className={styles.hrak8un}>not in print</div><div>hey</div>
      {props.children}
    </div>
  );
};

export default Print;
// fonts {}
"
`;

exports[`react-dom parses react-dom ProxyTest 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
  hg3iw2q: css('css-sw3yj', [], () => [
    \`.css-sw3yj { flex-direction: row; -webkit-box-direction: normal; -webkit-box-orient: horizontal; -ms-flex-direction: row; -webkit-flex-direction: row; }\`,
  ]),
};

const ProxyTest = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div className={styles.h1lmw638}>
      <div className={styles.hg3iw2q}>
        {props.bla && childrenArray[props.chidrenProxyMap['Something']]
          ? React.cloneElement(
              childrenArray[props.chidrenProxyMap['Something']],
              { onClick: props.onClickRemapped }
            )
          : null}
        {' '}data-test-id=\\"ProxyTest.Proxy\\"{
          childrenArray[props.chidrenProxyMap['View1']]
        }
        {' '}data-test-id=\\"ProxyTest.Proxy\\"
      </div>
    </div>
  );
};

export default ProxyTest;
// fonts {}
"
`;

exports[`react-dom parses react-dom Scope 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1lv6cq4: css('css-jk0pkr', [], () => [\`.css-jk0pkr { color: red; }\`]),
};

const Scope = props => {
  return (
    <div className={styles.h1lv6cq4}>
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue ? props.blue : '1 red'}
    </div>
  );
};

export default Scope;
// fonts {}
"
`;

exports[`react-dom parses react-dom ScopePopup 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

const ScopePopup = props => {
  return (
    <div data-test-id=\\"Popup\\" animate=\\"pop\\" className={styles.h1lmw638}>
      <button
        data-test-id=\\"ScopePopup.Toggle\\"
        onClick={props.toggle}
        className={styles.h1lmw638}
      >
        <div>toggle popup</div>
      </button>
      <div data-test-id=\\"ScopePopup.Content\\" className={styles.h1lmw638}>
        <div>I'm inside the popup</div>
      </div>
      {props.children}
    </div>
  );
};

export default ScopePopup;
// fonts {}
"
`;

exports[`react-dom parses react-dom ScopePopup2 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
  hfwrjqy: css('css-4l3qiu', [], () => [
    \`.css-4l3qiu { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column;
opacity: 0; }\`,
  ]),
};

const ScopePopup2 = props => {
  return (
    <div data-test-id=\\"Popup\\" className={styles.h1lmw638}>
      <button
        data-test-id=\\"ScopePopup2.Toggle\\"
        onClick={props.toggle}
        className={styles.h1lmw638}
      >
        <div>toggle popup</div>
      </button>
      <div
        data-test-id=\\"ScopePopup2.Content\\"
        scale={0}
        className={styles.hfwrjqy}
      >
        <div>I'm inside the popup</div>
      </div>
      {props.children}
    </div>
  );
};

export default ScopePopup2;
// fonts {}
"
`;

exports[`react-dom parses react-dom Teleport 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { Link } from 'react-router-dom';
import css from 'glam';
const styles = {
  hg3iw2q: css('css-sw3yj', [], () => [
    \`.css-sw3yj { flex-direction: row; -webkit-box-direction: normal; -webkit-box-orient: horizontal; -ms-flex-direction: row; -webkit-flex-direction: row; }\`,
  ]),
};

const Teleport = props => {
  return (
    <Link to=\\"..\\" className={styles.hg3iw2q}>
      <div>go back</div>{props.children}
    </Link>
  );
};

export default Teleport;
// fonts {}
"
`;

exports[`react-dom parses react-dom Test 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import Custom from './Custom.view.js';

const Test = props => {
  return (
    <Custom
      data-test-id=\\"Custom\\"
      stuff=\\"eqweqw\\"
      childrenProxyMap={{ Something: 0, Another: 1 }}
    >
      <div data-test-id=\\"Test.Something\\">v1vh1t1</div>
      <div data-test-id=\\"Test.Another\\">inside custom</div>{props.children}
    </Custom>
  );
};

export default Test;
// fonts {}
"
`;

exports[`react-dom parses react-dom Toggle 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

class RemapToggle extends React.Component {
  constructor(props) {
    super(props);
    this.state = { isOn: props.isOn };
  }
  toggleIsOn = () => this.setState({ isOn: !this.state.isOn });

  render() {
    return (
      <Toggle {...this.props} {...this.state} toggleIsOn={this.toggleIsOn} />
    );
  }
}

const Toggle = props => {
  return (
    <button onClick={props.toggleIsOn} className={styles.h1lmw638}>
      <div>hey</div>{props.children}
    </button>
  );
};

export default RemapToggle;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseCaptureEmail 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  hevllt7: css('css-17byui2', [], () => [
    \`.css-17byui2 { border: 1px solid black;
color: red; }\`,
    \`.css-17byui2::placeholder { color: blue; }\`,
  ]),
};

const UseCaptureEmail = props => {
  return (
    <input
      data-test-id=\\"Email\\"
      onSubmit={props.onSubmit}
      className={styles.hevllt7}
    />
  );
};

export default UseCaptureEmail;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseCaptureFile 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';

const UseCaptureFile = props => {
  return <input data-test-id=\\"File\\" />;
};

export default UseCaptureFile;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseCaptureNumber 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';

const UseCaptureNumber = props => {
  return <input data-test-id=\\"Number\\" />;
};

export default UseCaptureNumber;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseCapturePhone 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';

const UseCapturePhone = props => {
  return <input data-test-id=\\"Phone\\" />;
};

export default UseCapturePhone;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseCaptureSecure 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';

const UseCaptureSecure = props => {
  return <input data-test-id=\\"Secure\\" />;
};

export default UseCaptureSecure;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseCaptureText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';

const UseCaptureText = props => {
  return <input data-test-id=\\"Text\\" />;
};

export default UseCaptureText;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseHorizontal 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1nnugsi: css('css-vkz5lf', [], () => [
    \`.css-vkz5lf { flex-direction: row; -webkit-box-direction: normal; -webkit-box-orient: horizontal; -ms-flex-direction: row; -webkit-flex-direction: row;
border: 1px solid red; }\`,
  ]),
};

const UseHorizontal = props => {
  return <div className={styles.h1nnugsi}>{props.children}</div>;
};

export default UseHorizontal;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseImage 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';

const UseImage = props => {
  return <img src=\\"https://viewsdx.com/rocks.jpg\\" />;
};

export default UseImage;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseOfProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import Button from './Button.view.js';
import css from 'glam';
const styles = {
  hg3iw2q: css('css-sw3yj', [], () => [
    \`.css-sw3yj { flex-direction: row; -webkit-box-direction: normal; -webkit-box-orient: horizontal; -ms-flex-direction: row; -webkit-flex-direction: row; }\`,
  ]),
};

const UseOfProxy = props => {
  return (
    <div data-test-id=\\"App\\" className={styles.hg3iw2q}>
      <Button
        data-test-id=\\"UseOfProxy.Button\\"
        color=\\"red\\"
        icon=\\"MyIcon\\"
        text=\\"I'm a button!\\"
      />
      {props.children}
    </div>
  );
};

export default UseOfProxy;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  hg3iw2q: css('css-sw3yj', [], () => [
    \`.css-sw3yj { flex-direction: row; -webkit-box-direction: normal; -webkit-box-orient: horizontal; -ms-flex-direction: row; -webkit-flex-direction: row; }\`,
  ]),
};

const UseProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <div data-test-id=\\"Button\\" className={styles.hg3iw2q}>
      {childrenArray[props.chidrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.chidrenProxyMap['props.icon']],
            { fill: 'red' }
          )
        : null}
      {' '}data-test-id=\\"UseProxy.Icon\\"<div>{props.text}</div>
    </div>
  );
};

export default UseProxy;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseRouter 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-dom';
import { BrowserRouter as Router } from 'react-router-dom';
import Topics from './Topics.view.js';
import css from 'glam';
const styles = {
  hg3iw2q: css('css-sw3yj', [], () => [
    \`.css-sw3yj { flex-direction: row; -webkit-box-direction: normal; -webkit-box-orient: horizontal; -ms-flex-direction: row; -webkit-flex-direction: row; }\`,
  ]),
};

const UseRouter = props => {
  return (
    <Router>
      <div className={styles.hg3iw2q}>
        <Route
          path=\\"/\\"
          exact
          render={routeProps =>
            <Home
              data-test-id=\\"UseRouter.Home\\"
              heigth={props.height}
              width={360}
              {...routeProps}
              childrenProxyMap={{ About: 0 }}
            >
              <Route
                path=\\"/about\\"
                render={routeProps =>
                  <About
                    data-test-id=\\"UseRouter.About\\"
                    {...routeProps}
                    childrenProxyMap={{ Topics: 0 }}
                  >
                    <Route
                      path=\\"/topics\\"
                      render={routeProps =>
                        <Topics
                          data-test-id=\\"UseRouter.Topics\\"
                          {...routeProps}
                        />}
                    />
                  </About>}
              />
            </Home>}
        />
        {props.children}
      </div>
    </Router>
  );
};

export default UseRouter;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseSvg 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import Circle from './Circle.view.js';
import G from './G.view.js';
import Path from './Path.view.js';

const UseSvg = props => {
  return (
    <svg viewBox=\\"0 0 20 20\\">
      <Path
        data-test-id=\\"UseSvg.Path\\"
        d=\\"0 20\\"
        childrenProxyMap={{ Circle: 0 }}
      >
        <Circle
          data-test-id=\\"UseSvg.Circle\\"
          cx={10}
          cy={5}
          r={5}
          childrenProxyMap={{ G: 0 }}
        >
          <G>
            <Path
              data-test-id=\\"UseSvg.Path\\"
              d={1}
              childrenProxyMap={{ Path: 0, SvgText: 1 }}
            >
              <Path data-test-id=\\"UseSvg.Path\\" d={2} /><text text=\\"hey\\" />
            </Path>
          </G>
        </Circle>
      </Path>
      {props.children}
    </svg>
  );
};

export default UseSvg;
// fonts {}
"
`;

exports[`react-dom parses react-dom UseText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1w7s7t6: css('css-1l09f9n', [], () => [
    \`.css-1l09f9n { color: blue;
font-family: Montserrat, sans-serif;
font-size: 16px;
font-weight: 300; }\`,
  ]),
};

const UseText = props => {
  return <div className={styles.h1w7s7t6}>Hi, I'm some text</div>;
};

export default UseText;
// fonts {\\"Montserrat\\":[\\"300\\"]}
"
`;

exports[`react-dom parses react-dom UseVertical 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  h1vjf5pn: css('css-nxb3y5', [], () => [
    \`.css-nxb3y5 { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column;
background-color: red; }\`,
  ]),
};

const UseVertical = props => {
  return <div className={styles.h1vjf5pn}>{props.children}</div>;
};

export default UseVertical;
// fonts {}
"
`;

exports[`react-dom parses react-dom ViewAndListWithData 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import addressesData from './addresses.data.js';
import css from 'glam';
import userData from './user.data.js';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

const ViewAndListWithData = props => {
  return (
    <div data-test-id=\\"User\\" className={styles.h1lmw638}>
      <div>{props.name}</div>
      <div
        data-test-id=\\"ViewAndListWithData.Addresses\\"
        className={styles.h1lmw638}
      >
        {Array.isArray(addressesData) &&
          addressesData.map((item, index) =>
            <div key={index}>{item.city}</div>
          )}
      </div>
      {props.children}
    </div>
  );
};
ViewAndListWithData.defaultProps = userData;

export default ViewAndListWithData;
// fonts {}
"
`;

exports[`react-dom parses react-dom ViewWithData 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
import userData from './user.data.js';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

const ViewWithData = props => {
  return (
    <div data-test-id=\\"User\\" className={styles.h1lmw638}>
      <div>{props.name}</div>{props.children}
    </div>
  );
};
ViewWithData.defaultProps = userData;

export default ViewWithData;
// fonts {}
"
`;

exports[`react-dom parses react-dom When 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  hg3iw2q: css('css-sw3yj', [], () => [
    \`.css-sw3yj { flex-direction: row; -webkit-box-direction: normal; -webkit-box-orient: horizontal; -ms-flex-direction: row; -webkit-flex-direction: row; }\`,
  ]),
};

const When = props => {
  return (
    <div data-test-id=\\"App\\" className={styles.hg3iw2q}>
      {props.showMe ? <div>I may be hidden</div> : null}{props.children}
    </div>
  );
};

export default When;
// fonts {}
"
`;

exports[`react-dom parses react-dom WhenList 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import css from 'glam';
const styles = {
  hg3iw2q: css('css-sw3yj', [], () => [
    \`.css-sw3yj { flex-direction: row; -webkit-box-direction: normal; -webkit-box-orient: horizontal; -ms-flex-direction: row; -webkit-flex-direction: row; }\`,
  ]),
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

const WhenList = props => {
  return (
    <div data-test-id=\\"App\\" className={styles.hg3iw2q}>
      {props.showMe
        ? <div className={styles.h1lmw638}>
            {Array.isArray(props.list) &&
              props.list.map((item, index) =>
                <div key={index}>{item.thing}</div>
              )}
          </div>
        : null}
      {props.children}
    </div>
  );
};

export default WhenList;
// fonts {}
"
`;

exports[`react-dom parses react-dom WhenTopLevel 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';

const WhenTopLevel = props => {
  return props.showMe ? <div>I may be hidden</div> : null;
};

export default WhenTopLevel;
// fonts {}
"
`;

exports[`react-dom parses react-dom WithTest 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import * as fromTests from './WithTest.view.tests';
import css from 'glam';
const styles = {
  h1lmw638: css('css-1s0kfvh', [], () => [
    \`.css-1s0kfvh { flex-direction: column; -webkit-box-direction: normal; -webkit-box-orient: vertical; -ms-flex-direction: column; -webkit-flex-direction: column; }\`,
  ]),
};

class TestsWithTest extends React.Component {
  constructor(props) {
    super(props);

    this.display = this.display.bind(this);
    this.tests = fromTests.make(this.display);

    this.state = {
      active: props.test,
      data: this.tests[props.test] || this.tests[this.tests._main],
    };
  }

  display(data, active) {
    this.setState(
      {
        active,
        data,
      },
      () => {
        if (typeof this.props.onInteraction === 'function') {
          this.props.onInteraction();
        }
      }
    );
  }

  componentWillReceiveProps(next) {
    if (this.state.active !== next.test) {
      this.setState({
        active: next.test,
        data: this.tests[next.test],
      });
    }
  }

  render() {
    const { props, state } = this;
    return (
      <WithTest
        width={props.width}
        height={props.height}
        {...state.data}
        {...clean(props)}
      />
    );
  }
}
function clean(props) {
  const ret = {};
  Object.keys(props)
    .filter(prop => prop !== 'height' && prop !== 'width' && prop !== 'test')
    .forEach(prop => (ret[prop] = props[prop]));
  return ret;
}
TestsWithTest.tests = fromTests.names;

const WithTest = props => {
  return (
    <button onClick={props.change} className={styles.h1lmw638}>
      <div>{props.text}</div>{props.children}
    </button>
  );
};

export default TestsWithTest;
// fonts {}
"
`;

exports[`react-native parses react-native Action 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const Action = props => {
  return props.check
    ? <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={props.clickMe}
        underlayColor=\\"transparent\\"
      >
        <View style={styles.h18pdll5}>
          <Text>click me</Text>{props.children}
        </View>
      </TouchableWithoutFeedback>
    : null;
};

export default Action;
// fonts {}
"
`;

exports[`react-native parses react-native AnimatedButton 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import {
  Animated,
  StyleSheet,
  Text,
  TouchableWithoutFeedback,
} from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const AnimatedButton = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <Animated.View style={[styles.h18pdll5, { opacity: props.opacity }]}>
        <Text>hey</Text>{props.children}
      </Animated.View>
    </TouchableWithoutFeedback>
  );
};

export default AnimatedButton;
// fonts {}
"
`;

exports[`react-native parses react-native BackgroundImage 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { Animated, Image, StyleSheet } from 'react-native';
const styles = StyleSheet.create({
  h18pdll5: { flexDirection: 'column' },
  hp2cr4d: { flexDirection: 'row' },
});

const BackgroundImage = props => {
  return (
    <Image
      resizeMode=\\"cover\\"
      source={{ uri: 'https://viewsdx.com/image.jpg' }}
      style={styles.h18pdll5}
    >
      <Animated.Image
        resizeMode=\\"contain\\"
        source={{ uri: props.backgroundImage }}
        style={styles.hp2cr4d}
      />
      {props.children}
    </Image>
  );
};

export default BackgroundImage;
// fonts {}
"
`;

exports[`react-native parses react-native BoxShadow 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { Animated, StyleSheet } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const BoxShadow = props => {
  return (
    <Animated.View
      style={[
        styles.h18pdll5,
        {
          elevation: 1,
          shadowOffset: { height: 10, width: 5 },
          shadowRadius: 2,
          shadowColor: props.color,
          shadowOpacity: 1,
        },
      ]}
    >
      {props.children}
    </Animated.View>
  );
};

export default BoxShadow;
// fonts {}
"
`;

exports[`react-native parses react-native GoTo 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const GoTo = props => {
  return (
    <View style={styles.h18pdll5}>
      <Text>Go to ViewsDX website!</Text>{props.children}
    </View>
  );
};

export default GoTo;
// fonts {}
"
`;

exports[`react-native parses react-native Hover 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({
  h1jrzrhl: { flexDirection: 'column', backgroundColor: 'black' },
  hyfo4ef: { color: 'white' },
});

const Hover = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <View testID=\\"Button\\" style={styles.h1jrzrhl}>
        <Text style={styles.hyfo4ef}>Hey!</Text>{props.children}
      </View>
    </TouchableWithoutFeedback>
  );
};

export default Hover;
// fonts {}
"
`;

exports[`react-native parses react-native HoverProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({
  h1jrzrhl: { flexDirection: 'column', backgroundColor: 'black' },
  hyfo4ef: { color: 'white' },
});

const HoverProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.onClick}
      underlayColor=\\"transparent\\"
    >
      <View testID=\\"Button\\" style={styles.h1jrzrhl}>
        {childrenArray[props.chidrenProxyMap['props.icon']]
          ? React.cloneElement(
              childrenArray[props.chidrenProxyMap['props.icon']],
              { fill: 'white', fillHover: 'black' }
            )
          : null}
        {' '}testID=\\"HoverProxy.Icon\\"<Text style={styles.hyfo4ef}>Hey!</Text>
      </View>
    </TouchableWithoutFeedback>
  );
};

export default HoverProxy;
// fonts {}
"
`;

exports[`react-native parses react-native JustText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { Text } from 'react-native';

const JustText = props => {
  return <Text>hey!</Text>;
};

export default JustText;
// fonts {}
"
`;

exports[`react-native parses react-native ListOfSomething 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { Animated, StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ListOfSomething = props => {
  return (
    <View style={styles.h18pdll5}>
      {Array.isArray(props.list) &&
        props.list.map((item, index) =>
          <Animated.Text
            dataIndex={index}
            style={{ color: item.color }}
            key={index}
          >
            {index}
          </Animated.Text>
        )}
      {props.children}
    </View>
  );
};

export default ListOfSomething;
// fonts {}
"
`;

exports[`react-native parses react-native ListWithData 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import usersData from './users.data.js';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ListWithData = props => {
  return (
    <View style={styles.h18pdll5}>
      {Array.isArray(usersData) &&
        usersData.map((item, index) => <Text key={index}>{item.name}</Text>)}
      {props.children}
    </View>
  );
};

export default ListWithData;
// fonts {}
"
`;

exports[`react-native parses react-native NameIsType 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { Text } from 'react-native';

const NameIsType = props => {
  return <Text testID=\\"Texto\\">iam</Text>;
};

export default NameIsType;
// fonts {}
"
`;

exports[`react-native parses react-native NestedRoutes 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { withRouter } from 'react-router';
import { Link } from 'react-router-native';
import { Route } from 'react-router-native';
import Topic from './Topic.view.js';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const NestedRoutes = props => {
  return (
    <View testID=\\"Topics\\" style={styles.h18pdll5}>
      <Text>topics</Text>
      <Link
        activeOpacity={0.7}
        to={\`\${props.match.url === '/' ? '' : props.match.url}/rendering\`}
        underlayColor=\\"transparent\\"
      >
        <View testID=\\"NestedRoutes.Link\\" style={styles.h18pdll5}>
          <Text>Rendering with React</Text>
        </View>
      </Link>
      <Route
        path=\\":topic\\"
        render={routeProps =>
          <Topic testID=\\"NestedRoutes.Topic\\" {...routeProps} />}
      />
      {props.children}
    </View>
  );
};

export default withRouter(NestedRoutes);
// fonts {}
"
`;

exports[`react-native parses react-native Print 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const Print = props => {
  return (
    <View style={styles.h18pdll5}>
      <Text>not in print</Text><Text>hey</Text>{props.children}
    </View>
  );
};

export default Print;
// fonts {}
"
`;

exports[`react-native parses react-native ProxyTest 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h18pdll5: { flexDirection: 'column' },
  hp2cr4d: { flexDirection: 'row' },
});

const ProxyTest = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <View style={styles.h18pdll5}>
      <View style={styles.hp2cr4d}>
        {props.bla && childrenArray[props.chidrenProxyMap['Something']]
          ? React.cloneElement(
              childrenArray[props.chidrenProxyMap['Something']],
              { onClick: props.onClickRemapped }
            )
          : null}
        {' '}testID=\\"ProxyTest.Proxy\\"{
          childrenArray[props.chidrenProxyMap['View1']]
        }
        {' '}testID=\\"ProxyTest.Proxy\\"
      </View>
    </View>
  );
};

export default ProxyTest;
// fonts {}
"
`;

exports[`react-native parses react-native Scope 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text } from 'react-native';
const styles = StyleSheet.create({ h1g2xbng: { color: 'red' } });

const Scope = props => {
  return (
    <Text style={styles.h1g2xbng}>
      {props.somethingGreen
        ? '2 green'
        : props.whatMakesBlue ? props.blue : '1 red'}
    </Text>
  );
};

export default Scope;
// fonts {}
"
`;

exports[`react-native parses react-native ScopePopup 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ScopePopup = props => {
  return (
    <View testID=\\"Popup\\" animate=\\"pop\\" style={styles.h18pdll5}>
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={props.toggle}
        underlayColor=\\"transparent\\"
      >
        <View testID=\\"ScopePopup.Toggle\\" style={styles.h18pdll5}>
          <Text>toggle popup</Text>
        </View>
      </TouchableWithoutFeedback>
      <View testID=\\"ScopePopup.Content\\" style={styles.h18pdll5}>
        <Text>I'm inside the popup</Text>
      </View>
      {props.children}
    </View>
  );
};

export default ScopePopup;
// fonts {}
"
`;

exports[`react-native parses react-native ScopePopup2 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({
  h18pdll5: { flexDirection: 'column' },
  hminotx: { flexDirection: 'column', opacity: 0 },
});

const ScopePopup2 = props => {
  return (
    <View testID=\\"Popup\\" style={styles.h18pdll5}>
      <TouchableWithoutFeedback
        activeOpacity={0.7}
        onPress={props.toggle}
        underlayColor=\\"transparent\\"
      >
        <View testID=\\"ScopePopup2.Toggle\\" style={styles.h18pdll5}>
          <Text>toggle popup</Text>
        </View>
      </TouchableWithoutFeedback>
      <View testID=\\"ScopePopup2.Content\\" scale={0} style={styles.hminotx}>
        <Text>I'm inside the popup</Text>
      </View>
      {props.children}
    </View>
  );
};

export default ScopePopup2;
// fonts {}
"
`;

exports[`react-native parses react-native Teleport 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { Link } from 'react-router-native';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const Teleport = props => {
  return (
    <Link activeOpacity={0.7} to=\\"..\\" underlayColor=\\"transparent\\">
      <View style={styles.hp2cr4d}><Text>go back</Text>{props.children}</View>
    </Link>
  );
};

export default Teleport;
// fonts {}
"
`;

exports[`react-native parses react-native Test 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import Custom from './Custom.view.js';
import { Text } from 'react-native';

const Test = props => {
  return (
    <Custom
      testID=\\"Custom\\"
      stuff=\\"eqweqw\\"
      childrenProxyMap={{ Something: 0, Another: 1 }}
    >
      <Text testID=\\"Test.Something\\">v1vh1t1</Text>
      <Text testID=\\"Test.Another\\">inside custom</Text>{props.children}
    </Custom>
  );
};

export default Test;
// fonts {}
"
`;

exports[`react-native parses react-native Toggle 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

class RemapToggle extends React.Component {
  constructor(props) {
    super(props);
    this.state = { isOn: props.isOn };
  }
  toggleIsOn = () => this.setState({ isOn: !this.state.isOn });

  render() {
    return (
      <Toggle {...this.props} {...this.state} toggleIsOn={this.toggleIsOn} />
    );
  }
}

const Toggle = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.toggleIsOn}
      underlayColor=\\"transparent\\"
    >
      <View style={styles.h18pdll5}><Text>hey</Text>{props.children}</View>
    </TouchableWithoutFeedback>
  );
};

export default RemapToggle;
// fonts {}
"
`;

exports[`react-native parses react-native UseCaptureEmail 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import dismissKeyboard from 'dismissKeyboard';
import { KeyboardAvoidingView, StyleSheet, TextInput } from 'react-native';
const styles = StyleSheet.create({
  hm4pcs: {
    borderColor: 'black',
    borderStyle: 'solid',
    borderWidth: 1,
    color: 'red',
  },
});

class UseCaptureEmail extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <KeyboardAvoidingView behavior=\\"position\\">
        <TouchableWithoutFeedback onPress={dismissKeyboard}>
          <TextInput
            onSubmitEditing={props.onSubmit}
            returnKeyType=\\"go\\"
            onChangeText={Email => this.setState({ Email })}
            ref={$e => (this.$captureEmail = $e)}
            value={state.Email}
            keyboardType=\\"email-address\\"
            underlineColorAndroid=\\"transparent\\"
            testID=\\"Email\\"
            placeholderTextColor=\\"blue\\"
            style={styles.hm4pcs}
          />
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    );
  }
}

export default UseCaptureEmail;
// fonts {}
"
`;

exports[`react-native parses react-native UseCaptureFile 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import CaptureFile from './CaptureFile.view.js';

class UseCaptureFile extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return <CaptureFile testID=\\"File\\" />;
  }
}

export default UseCaptureFile;
// fonts {}
"
`;

exports[`react-native parses react-native UseCaptureNumber 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import dismissKeyboard from 'dismissKeyboard';
import { KeyboardAvoidingView, TextInput } from 'react-native';

class UseCaptureNumber extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <KeyboardAvoidingView behavior=\\"position\\">
        <TouchableWithoutFeedback onPress={dismissKeyboard}>
          <TextInput testID=\\"Number\\" />
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    );
  }
}

export default UseCaptureNumber;
// fonts {}
"
`;

exports[`react-native parses react-native UseCapturePhone 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import dismissKeyboard from 'dismissKeyboard';
import { KeyboardAvoidingView, TextInput } from 'react-native';

class UseCapturePhone extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <KeyboardAvoidingView behavior=\\"position\\">
        <TouchableWithoutFeedback onPress={dismissKeyboard}>
          <TextInput testID=\\"Phone\\" />
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    );
  }
}

export default UseCapturePhone;
// fonts {}
"
`;

exports[`react-native parses react-native UseCaptureSecure 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import dismissKeyboard from 'dismissKeyboard';
import { KeyboardAvoidingView, TextInput } from 'react-native';

class UseCaptureSecure extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <KeyboardAvoidingView behavior=\\"position\\">
        <TouchableWithoutFeedback onPress={dismissKeyboard}>
          <TextInput testID=\\"Secure\\" />
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    );
  }
}

export default UseCaptureSecure;
// fonts {}
"
`;

exports[`react-native parses react-native UseCaptureText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import dismissKeyboard from 'dismissKeyboard';
import { KeyboardAvoidingView, TextInput } from 'react-native';

class UseCaptureText extends React.Component {
  constructor(props) {
    super(props);
    this.state = {};
  }

  render() {
    const { props, state } = this;

    return (
      <KeyboardAvoidingView behavior=\\"position\\">
        <TouchableWithoutFeedback onPress={dismissKeyboard}>
          <TextInput testID=\\"Text\\" />
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>
    );
  }
}

export default UseCaptureText;
// fonts {}
"
`;

exports[`react-native parses react-native UseHorizontal 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h13qdyyc: {
    flexDirection: 'row',
    borderColor: 'red',
    borderStyle: 'solid',
    borderWidth: 1,
  },
});

const UseHorizontal = props => {
  return <View style={styles.h13qdyyc}>{props.children}</View>;
};

export default UseHorizontal;
// fonts {}
"
`;

exports[`react-native parses react-native UseImage 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { Image } from 'react-native';

const UseImage = props => {
  return <Image source={{ uri: 'https://viewsdx.com/rocks.jpg' }} />;
};

export default UseImage;
// fonts {}
"
`;

exports[`react-native parses react-native UseOfProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import Button from './Button.view.js';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseOfProxy = props => {
  return (
    <View testID=\\"App\\" style={styles.hp2cr4d}>
      <Button
        testID=\\"UseOfProxy.Button\\"
        color=\\"red\\"
        icon=\\"MyIcon\\"
        text=\\"I'm a button!\\"
      />
      {props.children}
    </View>
  );
};

export default UseOfProxy;
// fonts {}
"
`;

exports[`react-native parses react-native UseProxy 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseProxy = props => {
  const childrenArray = React.Children.toArray(props.children);
  return (
    <View testID=\\"Button\\" style={styles.hp2cr4d}>
      {childrenArray[props.chidrenProxyMap['props.icon']]
        ? React.cloneElement(
            childrenArray[props.chidrenProxyMap['props.icon']],
            { fill: 'red' }
          )
        : null}
      {' '}testID=\\"UseProxy.Icon\\"<Text>{props.text}</Text>
    </View>
  );
};

export default UseProxy;
// fonts {}
"
`;

exports[`react-native parses react-native UseRouter 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import About from './About.view.js';
import Home from './Home.view.js';
import { Route } from 'react-router-native';
import { NativeRouter as Router } from 'react-router-native';
import Topics from './Topics.view.js';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const UseRouter = props => {
  return (
    <Router>
      <View style={styles.hp2cr4d}>
        <Route
          path=\\"/\\"
          exact
          render={routeProps =>
            <Home
              testID=\\"UseRouter.Home\\"
              heigth={props.height}
              width={360}
              {...routeProps}
              childrenProxyMap={{ About: 0 }}
            >
              <Route
                path=\\"/about\\"
                render={routeProps =>
                  <About
                    testID=\\"UseRouter.About\\"
                    {...routeProps}
                    childrenProxyMap={{ Topics: 0 }}
                  >
                    <Route
                      path=\\"/topics\\"
                      render={routeProps =>
                        <Topics testID=\\"UseRouter.Topics\\" {...routeProps} />}
                    />
                  </About>}
              />
            </Home>}
        />
        {props.children}
      </View>
    </Router>
  );
};

export default UseRouter;
// fonts {}
"
`;

exports[`react-native parses react-native UseSvg 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import Circle from './Circle.view.js';
import G from './G.view.js';
import Path from './Path.view.js';
import Svg, { Text as SvgText } from 'react-native-svg';

const UseSvg = props => {
  return (
    <Svg viewBox=\\"0 0 20 20\\">
      <Path testID=\\"UseSvg.Path\\" d=\\"0 20\\" childrenProxyMap={{ Circle: 0 }}>
        <Circle
          testID=\\"UseSvg.Circle\\"
          cx={10}
          cy={5}
          r={5}
          childrenProxyMap={{ G: 0 }}
        >
          <G>
            <Path
              testID=\\"UseSvg.Path\\"
              d={1}
              childrenProxyMap={{ Path: 0, SvgText: 1 }}
            >
              <Path testID=\\"UseSvg.Path\\" d={2} /><SvgText text=\\"hey\\" />
            </Path>
          </G>
        </Circle>
      </Path>
      {props.children}
    </Svg>
  );
};

export default UseSvg;
// fonts {}
"
`;

exports[`react-native parses react-native UseText 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text } from 'react-native';
const styles = StyleSheet.create({
  h11t0jc: { color: 'blue', fontFamily: 'Montserrat-300', fontSize: 16 },
});

const UseText = props => {
  return <Text style={styles.h11t0jc}>Hi, I'm some text</Text>;
};

export default UseText;
// fonts {\\"Montserrat\\":[\\"300\\"]}
"
`;

exports[`react-native parses react-native UseVertical 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, View } from 'react-native';
const styles = StyleSheet.create({
  h1c5r919: { flexDirection: 'column', backgroundColor: 'red' },
});

const UseVertical = props => {
  return <View style={styles.h1c5r919}>{props.children}</View>;
};

export default UseVertical;
// fonts {}
"
`;

exports[`react-native parses react-native ViewAndListWithData 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import addressesData from './addresses.data.js';
import userData from './user.data.js';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ViewAndListWithData = props => {
  return (
    <View testID=\\"User\\" style={styles.h18pdll5}>
      <Text>{props.name}</Text>
      <View testID=\\"ViewAndListWithData.Addresses\\" style={styles.h18pdll5}>
        {Array.isArray(addressesData) &&
          addressesData.map((item, index) =>
            <Text key={index}>{item.city}</Text>
          )}
      </View>
      {props.children}
    </View>
  );
};
ViewAndListWithData.defaultProps = userData;

export default ViewAndListWithData;
// fonts {}
"
`;

exports[`react-native parses react-native ViewWithData 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import userData from './user.data.js';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

const ViewWithData = props => {
  return (
    <View testID=\\"User\\" style={styles.h18pdll5}>
      <Text>{props.name}</Text>{props.children}
    </View>
  );
};
ViewWithData.defaultProps = userData;

export default ViewWithData;
// fonts {}
"
`;

exports[`react-native parses react-native When 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({ hp2cr4d: { flexDirection: 'row' } });

const When = props => {
  return (
    <View testID=\\"App\\" style={styles.hp2cr4d}>
      {props.showMe ? <Text>I may be hidden</Text> : null}{props.children}
    </View>
  );
};

export default When;
// fonts {}
"
`;

exports[`react-native parses react-native WhenList 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
const styles = StyleSheet.create({
  hp2cr4d: { flexDirection: 'row' },
  h18pdll5: { flexDirection: 'column' },
});

const WhenList = props => {
  return (
    <View testID=\\"App\\" style={styles.hp2cr4d}>
      {props.showMe
        ? <View style={styles.h18pdll5}>
            {Array.isArray(props.list) &&
              props.list.map((item, index) =>
                <Text key={index}>{item.thing}</Text>
              )}
          </View>
        : null}
      {props.children}
    </View>
  );
};

export default WhenList;
// fonts {}
"
`;

exports[`react-native parses react-native WhenTopLevel 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import { Text } from 'react-native';

const WhenTopLevel = props => {
  return props.showMe ? <Text>I may be hidden</Text> : null;
};

export default WhenTopLevel;
// fonts {}
"
`;

exports[`react-native parses react-native WithTest 1`] = `
"/* eslint-disable jsx-a11y/accessible-emoji */
import React from 'react';
import * as fromTests from './WithTest.view.tests';
import { StyleSheet, Text, TouchableWithoutFeedback, View } from 'react-native';
const styles = StyleSheet.create({ h18pdll5: { flexDirection: 'column' } });

class TestsWithTest extends React.Component {
  constructor(props) {
    super(props);

    this.display = this.display.bind(this);
    this.tests = fromTests.make(this.display);

    this.state = {
      active: props.test,
      data: this.tests[props.test] || this.tests[this.tests._main],
    };
  }

  display(data, active) {
    this.setState(
      {
        active,
        data,
      },
      () => {
        if (typeof this.props.onInteraction === 'function') {
          this.props.onInteraction();
        }
      }
    );
  }

  componentWillReceiveProps(next) {
    if (this.state.active !== next.test) {
      this.setState({
        active: next.test,
        data: this.tests[next.test],
      });
    }
  }

  render() {
    const { props, state } = this;
    return (
      <WithTest
        width={props.width}
        height={props.height}
        {...state.data}
        {...clean(props)}
      />
    );
  }
}
function clean(props) {
  const ret = {};
  Object.keys(props)
    .filter(prop => prop !== 'height' && prop !== 'width' && prop !== 'test')
    .forEach(prop => (ret[prop] = props[prop]));
  return ret;
}
TestsWithTest.tests = fromTests.names;

const WithTest = props => {
  return (
    <TouchableWithoutFeedback
      activeOpacity={0.7}
      onPress={props.change}
      underlayColor=\\"transparent\\"
    >
      <View style={styles.h18pdll5}>
        <Text>{props.text}</Text>{props.children}
      </View>
    </TouchableWithoutFeedback>
  );
};

export default TestsWithTest;
// fonts {}
"
`;
